-- General use functions for texdoc
--[[ 
Copyright 2008, 2009 Manuel Pégourié-Gonnard
Distributed under the terms of the GNU GPL version 3 or later.
See texdoc.tlu for details.
--]]

local L = {}
load_env(L, {
    'export_symbols',
    'string', 'io', 'os',
    'ipairs',
    'C',
    'config',
})

-- change '/' to '\' on windows
if os.type == "windows" then
    function win32_hook (path)
        local res = string.gsub (path, '/', '\\')
        return res -- get rid of gsub's 2nd return value
    end
else
    function win32_hook (path)
        return path
    end
end

-- generic error display function (see the error_priority constant)
function err_print (msg, lvl)
    -- be careful: maybe config.verbosity_level is not set yet
    local verbosity_level = config.verbosity_level or 2
    if C.err_priority[lvl] <= verbosity_level then
        io.stderr:write ("texdoc "..lvl..": "..msg.."\n")
    end
end

-- if zip is support and file is base..'.'..zip with zip in zipext_list, 
-- return base, zip -- otherwise, returns file, nil
function parse_zip(file) 
    if C.support_zipped then
        local zip
        for _, zip in ipairs(config.zipext_list) do
            local l = #zip + 1
            if string.sub(file, -l, -1) == '.'..zip then
                return string.sub(file, 1, -l - 1), zip
            end
        end
    end
    return file, nil
end

-- finally export a few symbols
export_symbols(L, {
    'err_print',
    'win32_hook',
    'parse_zip',
})
