#!/usr/bin/env texlua
--[[
Copyright 2008, 2009 Manuel Pégourié-Gonnard.

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see <http://www.gnu.org/licenses/>.

Previous work in the public domain:
- Contributions from Reinhard Kotucha (2008).
- First texlua versions by Frank Küster (2007).
- Original shell script by Thomas Esser, David Aspinall, and Simon Wilkinson.
--]]

----------------------   functions handling submodules   -----------------------

-- texdoc is divided in submodules (files).
-- Most submodules use a private environment: that is, the functions and
-- variables defined in a file won't be globally visible, unless explicitly
-- exported at the end of the file. However, global symbols will be visible in
-- the local environments.

-- load a local environment, importing symbols from (this function's) _G
local function get_env()
    local env = {}
    for sym, val in pairs(_G) do
        env[sym] = val
    end
    return env
end

-- import symbols from a table to (this fonction's) _G
-- usage: export_symbols(getfenv(), {'sym1', 'sym2', ... })
local function import_symbols(symbols)
    for sym, val in pairs(symbols) do
        assert(val ~= nil,
            'Internal error: trying to export undefined symbol '..sym..'.')
        assert(_G[sym] == nil,
            'Internal error: trying to export existing symbol '..sym..'.')
        _G[sym] = val
    end
end

-- execute a submodule of texdoc
local function texdoc_do(name)
    local pathname = kpse.find_file(name..'.tlu', 'texmfscripts')
    assert(pathname, 'Internal error: missing submodule: '..name)
    local submod = loadfile (pathname)
    setfenv(submod, get_env())
    local symbols = submod()
    if symbols then import_symbols(symbols) end
end

------------------------   initilisation & main code   -------------------------

-- initialize kpathsea
kpse.set_program_name(arg[-1], 'texdoc')

-- declare global variables;
-- they will be made read-only as soon as they are set
C = {}      -- constants
config = {} -- configuration settings

-- actually load the submodules now
texdoc_do('constants')
texdoc_do('functions')
texdoc_do('alias')
texdoc_do('score')
texdoc_do('config')
texdoc_do('search')
texdoc_do('view')

-- execute main()
texdoc_do('main')

-- the end
os.exit(C.exit_ok)
