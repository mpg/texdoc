-- File searching functions for texdoc.
--[[ 
Copyright 2008, 2009 Manuel Pégourié-Gonnard
Distributed under the terms of the GNU GPL version 3 or later.
See texdoc.tlu for details.
--]]

local L = {}
load_env(L, {
    'export_symbols',
    'os', 'string', 'table', 'lfs', 'kpse', 'io', 
    'ipairs', 'assert', 'tonumber', 'type', 'print',
    'err_print', 'win32_hook',
    'config', 'alias',
})

-- variables shared by all functions below
local s_doc_roots, s_docfiles, s_no_regex, s_isdir

-- structure of the s_docfiles variable
-- s_docfiles = {
--     [1] = docfile1, docfiles2, ...,
-- }
-- docfile = {
--     name = filename relative to tree, absolute if tree == nil,
--     tree = number of the tree in s_doc_roots,
--     exact = <boolean> does pattern match exactly,
-- }

------------------   get results from TEXDOCS (à la kpse)   -------------------

-- s_doc_roots is a Lua version of kpse's TEXDOCS
-- structure of the s_doc_roots variable:
-- s_doc_roots[i] = {
--     path                 = <path>,
--     index_mandatory      = <does path begin with !! in TEXDOCS?>
--     recursion_allowed    = <does path ends with // in TEXDOCS?>,
-- }

-- set the s_doc_roots list from kpse's $TEXDOCS
function get_texdocs ()
    s_doc_roots = {}
    local sep = (os.type == 'windows') and ';' or ':'
    local kpse_texdocs = kpse.expand_var("$TEXDOCS")
    -- expand the path and turn it into a lua list
    local raw_doc_roots = string.explode(kpse.expand_braces(kpse_texdocs), sep)
    err_print('Search paths:', 'debug3')
    for i, dir in ipairs(raw_doc_roots) do
        s_doc_roots[i] = {}
        local n
        dir, n = string.gsub (dir, '//$', '')
        s_doc_roots[i].recursion_allowed = (n == 1)
        s_doc_roots[i].path, n = string.gsub (dir, '^!!', '')
        s_doc_roots[i].index_mandatory = (n == 1)
        err_print(string.format('%s (index_mandatory=%s, recursion_allowed=%s)',
                s_doc_roots[i].path,
                s_doc_roots[i].index_mandatory   and 'true' or 'false',
                s_doc_roots[i].recursion_allowed and 'true' or 'false'),
            'debug3')
    end
end

-- roots are represented by their index in s_doc_roots
-- this is usefull to avoid fake matches and also for the sort routine
-- conversions are done by real_path() below and code_path() later

-- return the real path of a docfile
function real_path(docfile)
    if docfile.tree == nil then return docfile.name end
    if s_doc_roots == nil then get_texdocs() end
    return win32_hook(s_doc_roots[docfile.tree].path..'/'..docfile.name)
end

-- encode the base path on two digits and concatenate with filename
function code_path (code, file)
    local padding = (code > 9) and '' or '0'
    return padding..code..':'..file
end

-- find docfiles 
function get_docfiles_texdocs (pattern)
    s_docfiles = {}
    s_is_dir = {} -- s_is_dir[path] = true iff path is a dir, see scan_lsr
    if s_doc_roots == nil then get_texdocs() end
    for code, doc_root in ipairs (s_doc_roots) do
        root, shift = lsr_root (doc_root.path)
        if root and shift and doc_root.recursion_allowed then
            scan_lsr(root, code, shift, pattern)
        elseif (not doc_root.index_mandatory)
            and lfs.isdir(doc_root.path) then
            scan_tree(code, doc_root.path, '',
                pattern, doc_root.recursion_allowed)
        end
    end
    return rmdirs(s_docfiles)
end

-- merge two components of a path, taking care of empty components
function merge_path (a, b)
    return ((a == '') or (b == '')) and a..b or a..'/'..b
end

-- scan a tree without ls-R file
function scan_tree (code, base, cwd, pattern, recurse)
    for file in lfs.dir(base..'/'..cwd) do
        if file ~= '.' and file ~= '..' then
            local f = (cwd == '') and file or cwd..'/'..file
            if lfs.isdir(base..'/'..f) then
                if recurse then scan_tree(code, base, f, pattern, recurse) end
            else
                process_file(file, f, code, pattern, true)
            end
        end
    end
end

-- finds a ls-R file in a parent directory an return it or nil
function lsr_root (path)
    if not lfs.isdir (path) then return end
    local root, shift = path, ''
    if string.sub(root, -1) == '/' then root = string.sub(root, 1, -2) end
    while string.find(root, '/', 1, true) do
        if lfs.isfile(root..'/ls-R') then
            return root, shift
        end
        local last_comp = string.match(root, '^.*/(.*)$')
        -- /!\ cannot put last_comp in a regex: can contain special char
        root = string.sub(root, 1, - (#last_comp + 2))
        shift = last_comp..'/'..shift
    end
end

-- scan a ls-R file
function scan_lsr (cwd, code, shift, pattern)
    local isdoc = false
    local current_dir
    local l = #shift
    local lsr = assert(io.open(cwd..'/ls-R', 'r'))
    local _ = lsr:read('*line') -- throw away first line (comment)
    local maybe_dir = true -- next line may be a directory
    while true do
        local line = lsr:read('*line')
        while line == '' do line, maybe_dir = lsr:read('*line'), true end
        if line == nil then break end  -- EOF
        local dir_line = maybe_dir and string.match (line, '^%./(.*):$')
        if dir_line then
            maybe_dir = false -- next line may not be a dir
            if string.sub (dir_line, 1, l) == shift then
                isdoc = true
                current_dir = string.sub (dir_line, l+1)
                s_is_dir[code_path(code, current_dir)] = true
            elseif isdoc then
                break -- we're exiting the ./doc (or shift) dir, so it's over
            end
        elseif isdoc then
            process_file (line, merge_path(current_dir, line), code, pattern)
        end
    end
    lsr:close()
end

-- remove directories from a list
function rmdirs (files)
    local res = {}
    for _, f in ipairs(files) do
        if not s_is_dir[code_path(f.tree, f.name)] then
            table.insert(res, f)
        end
    end
    return res
end

------------------------------   select results   ------------------------------

-- says if file has a 'good' extenstion according to ext_list
function check_ext(file, pattern)
    local good_ext, exact_match = false, false
    local l, pat = string.len(pattern) + 1, pattern..'.'
    for _, e in ipairs(config.ext_list) do
        if e == '*' then
            good_ext = true
            if string.sub(file, 1, l) == pat then exact_match = true end
        elseif (e == '') then
            if not string.find(file, '.', 1, true) then good_ext = true end
            if file == pattern then exact_match = true end
        else
            if string.sub(file, -string.len(e)) == e then good_ext = true end
            if file == pattern..'.'..e then exact_match = true end
        end
    end
    return good_ext, exact_match
end

-- include a file in the *_docfiles lists if it "matches"
function process_file (file, pathfile, code, pattern)
    file = string.lower(file)
    local base, ext = string.match(file, '^(.*)%.(.*)$')
    if string.find(string.lower(pathfile), pattern, 1, s_no_regex) then
        local good_ext, exact_match = check_ext(file, pattern)
        if good_ext then
            table.insert(s_docfiles, {
                name = pathfile,
                tree = code,
                exact = exact_match,
            })
        end
    end
end

------------------------   get results from elsewhere   ------------------------

-- for sty files, we obviously don't want to look in TEXDOCS...
function get_docfiles_sty (styname)
    return {{
        name = kpse.find_file(styname) ,
        exact = true,
        tree = nil,
    }}
end

------------------------------   main function   -------------------------------

-- find docfiles according to pattern
-- regex is optional, defaults to false
function get_docfiles(pattern, regex)
    if not regex then s_no_regex = true end
    if string.match(string.lower(pattern), '%.([^/.]*)$') == 'sty'
        and s_no_regex then
        return get_docfiles_sty(pattern)
    else
        pattern = string.lower(pattern)
        -- apply aliases if relevant
        if s_no_regex and config.alias_switch and alias[pattern] then
            err_print (pattern.." aliased to "..alias[pattern], 'info')
            pattern = alias[pattern]
        end
        return get_docfiles_texdocs(pattern)
    end
end

-- finally export a few symbols
export_symbols(L, {
    'real_path',
    'get_docfiles', 
})
