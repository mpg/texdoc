Scoring
-------

With "texdoc todo",
        todo/todo-spl.pdf
should win over
        todonotes/todonotes.pdf                Package documentation

With "texdoc ean"
        ean/Readme 
should win over 
        barcodes/eandoc = Package doc
(probably)

Idea: instead of a good directory bonus, first pre-scan all results found to
see if one of them has a good directory. If so, all other results get a big
malus (like -5) for non-alias scoring. (?)

Should do: test suite with selected cases from real life (perhaps using fake
tlpdb + ls-R) and assertions about the results, such as "this one should come
before that one, this one should be first, that one should be <0, etc.  Would
serve both as documentation for myself and regression testing tool.

Files found using the tlpdb only should be scored heuristicly as if <pkgname>
were asked for. (Make sure heurisitc scoring returns a higher score for
names actually containing the string. Check the result with psnfss2e aliases.)

Improve debug output (metadata scoring).


Metadata problems
-----------------

Maybe a problem in TL's infra: no meta for ec's readme.

Meta missing with beebe's files.

Check meta with bezos package.


Code cleanup
------------

Adapt the alias structure to remember which one is the original. Then, the
kpse-like search routine can select only exact matches for this one. Also, the
scoring routine wouldn't need the original keyword as an argument anymore. Then
the Docfile object could have a .score virtual member.

Get rid of my load_env/export_symbols paranoia. Use standard module() thing,
plus locals.

Syntax simplifictation in some places using object-oriented syntax for strings?

Use texlive/tlpdb.tlu for tlpdb reading.



Ideas for later
===============

Use alt-getopt for options parsing (needs to be patched for error handling and
optional arguments: write my own gnu_getopt_long?) (Reinhard working on
something, too.)

Make the list of bad comments from the catalogue configurable? (Currently,
readme hardcoded.)


Not sure about that
-------------------

Information from the tlpdb isn't always as up-to-date as the catalogue, in case
the catalogue has been fixed for a package that wasn't update. Should I generate
Data.meta.lua directly from a fresh catalogue version?

Use language information from the catalogue/tlpdb. If no lang info from
catalogue, might try guessing based on filename, but is it worth it? The problem
is, how would it interact with the socring system? Would a +3 bonus for good
language be OK?

Write a coverage checking script? What would be its exact goals? May want to
discuss this with Phlipp S.

tlpdb cache should check if ext_list has changed, in theory. Is it worth it in
practice? I'll do it if someone complains...

Caching: now used only for tlpdb. Is it worth using it for ls-R files?
Configuration files?

Add support for shell-style globs (standard regex is probably too hard)
    Well, would anyone really use it? (would be for patterns in texdoc.cnf, not
    for texdoc arguments)

Use the 2-links trick from kpse when exploring trees? Check how it works on
windows.


Using the catalogue
-------------------

Obsolescence information could be useful (Phil's suggestion), but may be hard to
obtain (not in the tlpdb)... Well, if it's in the catalogue, I can ship a
Data.obsolete.lua file with the information...

Do something with the description from the catalogue?

Help maintainers standardise comments in order to allow for more accurate
scoring/classification?

--apropos using Jim's keywords and categorization, see Karl's mail:
http://tug.org/pipermail/texdoc/2010q3/000213.html


Auto-generation of doc files
----------------------------

To allow installing TL without the doc trees (cuts of the size by 2).
Suggested by Will.


Port on MikTeX ???
------------------

Lots of TeX-live specific stuff (implicitly) embedded in various places...

Add a function in texlua's kpse library returning all files for which a certain
Lua function (given as argument) returns true. Use only it.

What to do with all the functions using tlpdb? Is it possible to use an
equivalent on MikTeX?

Adapt to the different tree layout in MikTeX (TEXMFHOME etc don't exist).

May maintain two versions as branches???


Notes and references
--------------------

Texdoc GUI project going on since early May 2010, see messages from Enrico
Gregorio in my (mpg) inbox.
