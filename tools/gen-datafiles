#!/usr/bin/perl

# Generate data files to be distributed with texdoc.
#
# The idea is to use the cache generated by texdoc after reading the TeX Live
# database. We make sure to use the SVN version of texlive.tlpdb (the installed
# version is missing a lot of metadata due to a bug in TLPOBJ, now fixed).
#
# The script manipulates the environment to make sure the right versions and
# path are used.
#
# Manuel Pégourié-Gonnard, 2010. WTFPL v2.

my $usage = <<USAGE;
Usage: $0 [--td=texdoc-path] [--tl=texlive_path] [--force-wrong-branch]
USAGE

use warnings 'FATAL' => 'all';
use strict;
use utf8;
use open qw(:std utf8);
use Getopt::Long;

# texdoc constants, see constants.tlu
my $cache_name = 'texdoc/cache-tlpdb.lua'; # relative to TEXMFVAR
my $data_meta_name = 'Data.meta.lua';
my $data_tlpdb_name = 'Data.tlpdb.lua';

# defaults
my $tmp_dir = '/tmp';
my $texdoc_path = -d '.git' ? '.' : -d '../.git' ? '..' : $ENV{TEXDOCDEV};
my $texlive_path = "$ENV{TLROOT}/bin/x86_64-linux";
my $force_wrong_branch = 0;

# get options
GetOptions(
    'td=s' => \$texdoc_path,
    'tl=s' => \$texlive_path,
    'force-wrong-branch' => \$force_wrong_branch,
) or die "Unkown option.\n$usage";

# some more derived path
my $texlive_tlpdb = "$texlive_path/../../tlpkg/texlive.tlpdb";
my $texdoc_scriptdir = "$texdoc_path/script";

# check the paths
-d $tmp_dir and -w $tmp_dir or die "Bad tmpdir";
-d $texdoc_scriptdir or die "Bad texdoc_path";
-d $texlive_path and -x "$texlive_path/texlua" or die "Bad texlive_path";

# check that we are in the right branch
if (open my $git_head_fh, '<', "$texdoc_path/.git/HEAD") {
    my $git_head = <$git_head_fh>;
    close $git_head_fh;
    my ($git_branch_name) = $git_head =~ m"^ref: refs/heads/(.*)";
    $git_branch_name ||= '(no branch)';
    ($git_branch_name eq 'texlive') or $force_wrong_branch
	or die "Current branch is $git_branch_name!\n";
} elsif (not $force_wrong_branch ) {
    die "Not updating from a git repository.\n";
}

# make sure the path we want are used
$ENV{PATH} = "$texlive_path:$ENV{PATH}"; # use texlive svn
$ENV{TEXMFSCRIPTS} = "$texdoc_scriptdir:"; # use texdoc git
my $texdoc = "texlua $texdoc_scriptdir/texdoc.tlu"; #same
$ENV{TEXMFVAR} = $tmp_dir; # write the cache here

# have texdoc regenerate a fresh cache
unlink("$tmp_dir/$cache_name");
system("echo 'return {}' > $texdoc_scriptdir/$data_meta_name");
system("svn revert $texlive_tlpdb >/dev/null"); die "Svn revert failed: $!" if $?;
system("svn up $texlive_tlpdb >/dev/null"); die "Svn up failed: $!" if $?;
system("$texdoc texlive-en >/dev/null"); die "Texdoc is broken: $!" if $?;

# Data.tlpdb is easy: just copy the cache
system("mv $tmp_dir/$cache_name $texdoc_scriptdir/$data_tlpdb_name");
die("Failed to move file: $!") if $?;

# Data.meta needs a bit of filtering
open my $tlpdb, '<', "$texdoc_scriptdir/$data_tlpdb_name" or die "$!";
open my $meta,  '>', "$texdoc_scriptdir/$data_meta_name" or die "$!";
while (<$tlpdb>) {
    print $meta $_;
    last if /^}$/;
}
print $meta "return s_meta";
close $meta;
close $tlpdb;

# now test the two files
system("$texdoc texlive-en >/dev/null"); die "Data.meta borken: $!" if $?;
unlink $texlive_tlpdb; # to make sure Data.tlpdb is used
system("$texdoc texlive-en >/dev/null"); die "Data.tlpdb broken: $!" if $?;
system("svn revert $texlive_tlpdb >/dev/null"); die "Svn revert failed: $!" if $?

__END__
